import { Injectable } from "@nestjs/common";
import { PrismaService } from "../prisma/prisma.service";
import { v2 as cloudinary } from "cloudinary";

@Injectable()
export class GalleryPairsService {
  constructor(private prisma: PrismaService) {}

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î –ø–∞—Ä–∏ "–î–æ/–ü—ñ—Å–ª—è" –∫–æ–ª–∏ —î 3+3 —Ñ–æ—Ç–æ
   */
  async createPairsAutomatically(albumId: number): Promise<void> {
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ –∑ –∞–ª—å–±–æ–º—É
    const photos = await this.prisma.galleryPhoto.findMany({
      where: { albumId },
      orderBy: { createdAt: "asc" },
    });

    // –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –Ω–∞ "–î–æ" —Ç–∞ "–ü—ñ—Å–ª—è" –∑–∞ –º—ñ—Ç–∫–∞–º–∏
    const beforePhotos = photos.filter((photo) => photo.tag === "before");

    const afterPhotos = photos.filter((photo) => photo.tag === "after");

    console.log(
      `Found ${beforePhotos.length} "–î–æ" photos and ${afterPhotos.length} "–ü—ñ—Å–ª—è" photos`
    );

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –º—ñ–Ω—ñ–º—É–º 3 —Ñ–æ—Ç–æ –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
    if (beforePhotos.length < 3 || afterPhotos.length < 3) {
      console.log("Not enough photos to create pairs (need 3+3)");
      return;
    }

    // –ù–ï –≤–∏–¥–∞–ª—è—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –ø–∞—Ä–∏ - –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ
    // await this.prisma.beforeAfterPair.deleteMany({
    //   where: { albumId },
    // });

    // –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –ø–∞—Ä–∏, —â–æ–± –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    const existingPairs = await this.prisma.beforeAfterPair.findMany({
      where: { albumId },
      select: { beforePhotoId: true, afterPhotoId: true, collectionId: true },
    });

    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ —è–∫—ñ —Ñ–æ—Ç–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –ø–∞—Ä–∞—Ö
    const usedBeforePhotoIds = new Set<number>();
    const usedAfterPhotoIds = new Set<number>();
    const existingCollectionIds = new Set<number>();
    existingPairs.forEach((pair) => {
      usedBeforePhotoIds.add(pair.beforePhotoId);
      usedAfterPhotoIds.add(pair.afterPhotoId);
      if (pair.collectionId) {
        existingCollectionIds.add(pair.collectionId);
      }
    });

    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π collectionId –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ–ª–µ–∫—Ü—ñ–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —ñ—Å–Ω—É—é—á–∏–π + 1)
    const maxExistingCollectionId =
      existingCollectionIds.size > 0
        ? Math.max(...Array.from(existingCollectionIds))
        : 0;
    const startCollectionId = maxExistingCollectionId + 1;

    // –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –ø–∞—Ä–∞—Ö
    const availableBeforePhotos = beforePhotos.filter(
      (photo) => !usedBeforePhotoIds.has(photo.id)
    );
    const availableAfterPhotos = afterPhotos.filter(
      (photo) => !usedAfterPhotoIds.has(photo.id)
    );

    console.log(
      `üìä Available photos: ${availableBeforePhotos.length} "–î–æ" and ${availableAfterPhotos.length} "–ü—ñ—Å–ª—è" (excluding ${usedBeforePhotoIds.size} used before and ${usedAfterPhotoIds.size} used after)`
    );
    console.log(
      `üìä Used before photo IDs: [${Array.from(usedBeforePhotoIds)
        .slice(0, 10)
        .join(", ")}${usedBeforePhotoIds.size > 10 ? "..." : ""}]`
    );
    console.log(
      `üìä Used after photo IDs: [${Array.from(usedAfterPhotoIds)
        .slice(0, 10)
        .join(", ")}${usedAfterPhotoIds.size > 10 ? "..." : ""}]`
    );
    console.log(
      `üìÅ Existing collections: ${existingCollectionIds.size}, max collectionId: ${maxExistingCollectionId}, starting new collections from: ${startCollectionId}`
    );

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—ó –ø–æ 3+3 —Ñ–æ—Ç–æ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö (–Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö) —Ñ–æ—Ç–æ
    const collectionsToCreate = [];
    const maxCollections = Math.min(
      Math.floor(availableBeforePhotos.length / 3),
      Math.floor(availableAfterPhotos.length / 3)
    );

    for (let i = 0; i < maxCollections; i++) {
      const collectionId = startCollectionId + i;
      const startBefore = i * 3;
      const startAfter = i * 3;

      // –°—Ç–≤–æ—Ä–∏—Ç–∏ 3 –ø–∞—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ–æ—Ç–æ
      for (let j = 0; j < 3; j++) {
        const beforePhoto = availableBeforePhotos[startBefore + j];
        const afterPhoto = availableAfterPhotos[startAfter + j];

        if (beforePhoto && afterPhoto) {
          // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ñ–æ—Ç–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –±—É–¥—å-—è–∫–∏—Ö –ø–∞—Ä–∞—Ö (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ collectionId)
          const beforePhotoAlreadyUsed = usedBeforePhotoIds.has(beforePhoto.id);
          const afterPhotoAlreadyUsed = usedAfterPhotoIds.has(afterPhoto.id);

          if (!beforePhotoAlreadyUsed && !afterPhotoAlreadyUsed) {
            // –§–æ—Ç–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è - –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ä—É
            collectionsToCreate.push({
              albumId,
              beforePhotoId: beforePhoto.id,
              afterPhotoId: afterPhoto.id,
              label: `–ö–æ–ª–µ–∫—Ü—ñ—è ${collectionId} - –ü–∞—Ä–∞ ${j + 1}`,
              collectionId: collectionId,
            });

            // –í—ñ–¥—Ä–∞–∑—É –¥–æ–¥–∞—Ç–∏ –≤ –º–Ω–æ–∂–∏–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –≤ –æ–¥–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
            usedBeforePhotoIds.add(beforePhoto.id);
            usedAfterPhotoIds.add(afterPhoto.id);
          } else {
            console.log(
              `‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–∞—Ä—É: beforePhoto ${beforePhoto.id} (used: ${beforePhotoAlreadyUsed}) –∞–±–æ afterPhoto ${afterPhoto.id} (used: ${afterPhotoAlreadyUsed}) –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è`
            );
          }
        }
      }
    }

    if (collectionsToCreate.length > 0) {
      await this.prisma.beforeAfterPair.createMany({
        data: collectionsToCreate,
      });

      console.log(
        `Created ${collectionsToCreate.length} pairs in ${maxCollections} new collection(s) (starting from collectionId ${startCollectionId}) automatically`
      );
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä–∏ –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ñ–æ—Ç–æ
   */
  async getPairsWithPhotos(albumId: number) {
    const pairs = await this.prisma.beforeAfterPair.findMany({
      where: { albumId },
      include: {
        beforePhoto: true,
        afterPhoto: true,
      },
      orderBy: { createdAt: "asc" },
    });

    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ id –≤ key –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    return pairs.map((pair) => {
      const { id, ...rest } = pair;
      return { key: id, ...rest };
    });
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—ó (–≥—Ä—É–ø–∏ –ø–æ 3 –ø–∞—Ä–∏)
   */
  async getCollections(albumId: number) {
    const pairs = await this.getPairsWithPhotos(albumId);

    // –ì—Ä—É–ø—É–≤–∞—Ç–∏ –ø–∞—Ä–∏ –∑–∞ collectionId
    const collections = {};
    pairs.forEach((pair) => {
      const collectionId = pair.collectionId || 1;
      if (!collections[collectionId]) {
        collections[collectionId] = [];
      }
      collections[collectionId].push(pair);
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ –º–∞—Å–∏–≤ –∫–æ–ª–µ–∫—Ü—ñ–π
    return Object.keys(collections).map((collectionId) => ({
      key: parseInt(collectionId),
      pairs: collections[collectionId],
      count: collections[collectionId].length,
    }));
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ä–∏
   */
  async canCreatePairs(albumId: number): Promise<boolean> {
    const photos = await this.prisma.galleryPhoto.findMany({
      where: { albumId },
    });

    const beforeCount = photos.filter((photo) => photo.tag === "before").length;

    const afterCount = photos.filter((photo) => photo.tag === "after").length;

    return beforeCount >= 3 && afterCount >= 3;
  }

  /**
   * –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—é –∫–æ–ª–µ–∫—Ü—ñ—é (3 –ø–∞—Ä–∏ "–î–æ —ñ –ü—ñ—Å–ª—è")
   */
  async deleteCollection(
    albumId: number,
    collectionId: number,
    deletePhotos: boolean = true
  ): Promise<{ deletedPairs: number; deletedPhotos: number }> {
    // –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –ø–∞—Ä–∏ —Ü—ñ—î—ó –∫–æ–ª–µ–∫—Ü—ñ—ó
    const pairs = await this.prisma.beforeAfterPair.findMany({
      where: { albumId, collectionId },
      include: { beforePhoto: true, afterPhoto: true },
    });

    if (pairs.length === 0) {
      return { deletedPairs: 0, deletedPhotos: 0 };
    }

    // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–∏
    await this.prisma.beforeAfterPair.deleteMany({
      where: { albumId, collectionId },
    });

    let deletedPhotos = 0;

    if (deletePhotos) {
      // –ó—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ñ–æ—Ç–æ ID
      const photoIds = new Set<number>();
      pairs.forEach((pair) => {
        photoIds.add(pair.beforePhotoId);
        photoIds.add(pair.afterPhotoId);
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ñ–æ—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ —ñ–Ω—à–∏—Ö –ø–∞—Ä–∞—Ö
      for (const photoId of photoIds) {
        const otherPairs = await this.prisma.beforeAfterPair.findMany({
          where: {
            OR: [{ beforePhotoId: photoId }, { afterPhotoId: photoId }],
          },
        });

        // –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —ñ–Ω—à–∏—Ö –ø–∞—Ä–∞—Ö - –≤–∏–¥–∞–ª–∏—Ç–∏
        if (otherPairs.length === 0) {
          const photo = await this.prisma.galleryPhoto.findUnique({
            where: { id: photoId },
          });

          if (photo) {
            // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ Cloudinary (—è–∫—â–æ —î publicId)
            if (photo.publicId) {
              try {
                // –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏ UploadService –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ Cloudinary
                console.log(`Would delete from Cloudinary: ${photo.publicId}`);
              } catch (error) {
                console.error(
                  `Failed to delete from Cloudinary: ${photo.publicId}`,
                  error
                );
              }
            }

            // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –ë–î
            await this.prisma.galleryPhoto.delete({
              where: { id: photoId },
            });

            deletedPhotos++;
          }
        }
      }
    }

    // –û—á–∏—Å—Ç–∏—Ç–∏ —Å–∏—Ä–æ—Ç–ª–∏–≤—ñ —Ñ–æ—Ç–æ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó
    await this.cleanupOrphanedPhotos(albumId);

    return { deletedPairs: pairs.length, deletedPhotos };
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó
   */
  async getPairsByCollection(albumId: number, collectionId: number) {
    return this.prisma.beforeAfterPair.findMany({
      where: { albumId, collectionId },
      include: {
        beforePhoto: true,
        afterPhoto: true,
      },
      orderBy: { createdAt: "asc" },
    });
  }

  /**
   * –ó–∞–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ "–î–æ" –≤ –ø–∞—Ä—ñ
   */
  async replaceBeforePhoto(pairId: number, newPhotoId: number): Promise<any> {
    const pair = await this.prisma.beforeAfterPair.findUnique({
      where: { id: pairId },
      include: { beforePhoto: true },
    });

    if (!pair) {
      throw new Error("Pair not found");
    }

    // –û–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä—É –∑ –Ω–æ–≤–∏–º —Ñ–æ—Ç–æ
    const updatedPair = await this.prisma.beforeAfterPair.update({
      where: { id: pairId },
      data: { beforePhotoId: newPhotoId },
      include: { beforePhoto: true, afterPhoto: true },
    });

    return updatedPair;
  }

  /**
   * –ó–∞–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ "–ü—ñ—Å–ª—è" –≤ –ø–∞—Ä—ñ
   */
  async replaceAfterPhoto(pairId: number, newPhotoId: number): Promise<any> {
    const pair = await this.prisma.beforeAfterPair.findUnique({
      where: { id: pairId },
      include: { afterPhoto: true },
    });

    if (!pair) {
      throw new Error("Pair not found");
    }

    // –û–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä—É –∑ –Ω–æ–≤–∏–º —Ñ–æ—Ç–æ
    const updatedPair = await this.prisma.beforeAfterPair.update({
      where: { id: pairId },
      data: { afterPhotoId: newPhotoId },
      include: { beforePhoto: true, afterPhoto: true },
    });

    return updatedPair;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ, —è–∫—ñ –Ω–µ –≤—Ö–æ–¥—è—Ç—å –≤ –∂–æ–¥–Ω—É –ø–∞—Ä—É (—Å–∏—Ä–æ—Ç–ª–∏–≤—ñ —Ñ–æ—Ç–æ)
   */
  async cleanupOrphanedPhotos(albumId: number): Promise<number> {
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ –∑ –∞–ª—å–±–æ–º—É
    const allPhotos = await this.prisma.galleryPhoto.findMany({
      where: { albumId },
    });

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–∞—Ä–∏ –∞–ª—å–±–æ–º—É
    const allPairs = await this.prisma.beforeAfterPair.findMany({
      where: { albumId },
      select: { beforePhotoId: true, afterPhotoId: true },
    });

    // –ó—ñ–±—Ä–∞—Ç–∏ ID –≤—Å—ñ—Ö —Ñ–æ—Ç–æ, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –ø–∞—Ä–∞—Ö
    const usedPhotoIds = new Set<number>();
    allPairs.forEach((pair) => {
      usedPhotoIds.add(pair.beforePhotoId);
      usedPhotoIds.add(pair.afterPhotoId);
    });

    // –ó–Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ, —è–∫—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è
    const orphanedPhotos = allPhotos.filter(
      (photo) => !usedPhotoIds.has(photo.id)
    );

    // –í–∏–¥–∞–ª–∏—Ç–∏ —Å–∏—Ä–æ—Ç–ª–∏–≤—ñ —Ñ–æ—Ç–æ
    let deletedCount = 0;
    for (const photo of orphanedPhotos) {
      try {
        // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ Cloudinary (—è–∫—â–æ —î publicId)
        if (photo.publicId) {
          try {
            await cloudinary.uploader.destroy(photo.publicId);
            console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∑ Cloudinary: ${photo.publicId}`);
          } catch (cloudinaryError) {
            console.error(
              `–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ Cloudinary ${photo.publicId}:`,
              cloudinaryError
            );
          }
        }

        // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –ë–î
        await this.prisma.galleryPhoto.delete({
          where: { id: photo.id },
        });

        deletedCount++;
        console.log(
          `‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Å–∏—Ä–æ—Ç–ª–∏–≤–µ —Ñ–æ—Ç–æ (ID: ${photo.id}, tag: ${photo.tag})`
        );
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ ${photo.id}:`, error);
      }
    }

    if (deletedCount > 0) {
      console.log(
        `üßπ –û—á–∏—â–µ–Ω–æ ${deletedCount} —Å–∏—Ä–æ—Ç–ª–∏–≤–∏—Ö —Ñ–æ—Ç–æ –∑ –∞–ª—å–±–æ–º—É ${albumId}`
      );
    }

    return deletedCount;
  }
}
